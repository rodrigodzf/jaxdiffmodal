# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/interpolation.ipynb.

# %% auto 0
__all__ = ["bilinear_interpolation"]

# %% ../nbs/interpolation.ipynb 1
import numpy as np


# %% ../nbs/interpolation.ipynb 2
def bilinear_interpolation(
    u: np.ndarray,  # 2D array with the function
    rp: np.ndarray,  # position to interpolate
):
    # note only will work for square grid
    Nx = u.shape[0]
    Ny = u.shape[1]

    rp_grid = np.array([Nx, Ny]) * rp
    rp_grid_left_bottom = np.floor(rp_grid).astype(int)
    rp_grid_right_top = rp_grid_left_bottom + 1

    x_1 = rp_grid_left_bottom[0]
    x_2 = rp_grid_right_top[0]
    y_1 = rp_grid_left_bottom[1]
    y_2 = rp_grid_right_top[1]
    x = rp_grid[0]
    y = rp_grid[1]

    w_11 = (x_2 - x) * (y_2 - y)
    w_12 = (x_2 - x) * (y - y_1)
    w_21 = (x - x_1) * (y_2 - y)
    w_22 = (x - x_1) * (y - y_1)

    f_11 = u[x_1, y_1]
    f_12 = u[x_1, y_2]
    f_21 = u[x_2, y_1]
    f_22 = u[x_2, y_2]

    interpolated = w_11 * f_11 + w_12 * f_12 + w_21 * f_21 + w_22 * f_22
    return interpolated
